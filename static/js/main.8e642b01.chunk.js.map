{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","status","handleChange","event","target","name","value","setState","filterByTitle","todo","title","toLowerCase","includes","filterByStatus","completed","this","props","todos","onUserSelect","selectedUserId","visibleTodos","filter","className","type","placeholder","onChange","disabled","style","color","map","id","userId","key","classNames","checked","readOnly","onClick","React","Component","defaultProps","request","url","options","fetch","then","response","ok","json","getUser","CurrentUser","user","loadUser","a","prevProps","clearUser","email","phone","PureComponent","App","selectUser","clearForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e642b01.chunk.js","sourcesContent":["\nimport React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    status: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  // todo подготовка методов для фильтровки инпутом и селектом\n  filterByTitle = todo => (\n    todo.title.toLowerCase().includes(this.state.query.toLowerCase())\n  )\n\n  filterByStatus = (todo) => {\n    switch (this.state.status) {\n      case 'active': return !todo.completed;\n      case 'completed': return todo.completed;\n      default: return true;\n    }\n  }\n\n  render() {\n    const { todos, onUserSelect, selectedUserId } = this.props;\n\n    // todo используем методы фильтрации для массива видимых тудушек\n    const visibleTodos = todos\n      .filter(this.filterByTitle)\n      .filter(this.filterByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n\n          <form className=\"TodoList__form\">\n            <label className=\"TodoList__label\">\n              <h3>Find todo by title</h3>\n              <input\n                className=\"TodoList__input\"\n                type=\"text\"\n                name=\"query\"\n                placeholder=\"Enter title here\"\n                value={this.state.query}\n                onChange={this.handleChange}\n              />\n            </label>\n\n            <label>\n              <h3>Find todo by status</h3>\n              <select\n                className=\"TodoList__input\"\n                name=\"status\"\n                value={this.state.status}\n                onChange={this.handleChange}\n              >\n                <option value=\"\" disabled>Choose todo status</option>\n                <option value=\"\" style={{ color: '#2146ff' }}>All todos</option>\n                <option\n                  value=\"active\"\n                  style={{ color: '#ff3626' }}\n                >\n                  Active todos\n                </option>\n                <option\n                  value=\"completed\"\n                  style={{ color: '#459595' }}\n                >\n                  Completed todos\n                </option>\n              </select>\n            </label>\n          </form>\n\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(({ id, title, userId, completed }) => (\n              <li\n                key={id}\n                className={classNames('TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !completed,\n                    'TodoList__item--checked': completed,\n                  })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={completed}\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames('TodoList__user-button',\n                    'button',\n                    {\n                      'TodoList__user-button--selected':\n                        selectedUserId === userId,\n                    })}\n                  onClick={() => {\n                    onUserSelect(userId);\n                  }}\n                >\n                  User&nbsp;\n                  #\n                  {userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number.isRequired,\n      title: propTypes.string.isRequired,\n      iserId: propTypes.number.isRequired,\n      completed: propTypes.bool.isRequired,\n    }),\n  ),\n  onUserSelect: propTypes.func.isRequired,\n  selectedUserId: propTypes.number.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","/* eslint-disable */\nconst BASE_URL = 'https://mate.academy/students-api';\nconst todos = '/todos';\n\nconst request = (url, options) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => {\n      if (!response.ok) {\n      throw (`${response.status}`)\n      }\n      \n      return response.json();\n  })\n}\n\nexport const getTodos = () => {\n  return request(todos)\n}\n\nexport const getUsers = () => {\n  return request('/users')\n}\n\nexport const getUser = (userId) => {\n  return request(`/users/${userId}`)\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async() => {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { userId, clearUser } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {userId}\n          </span>\n        </h2>\n\n        {!user ? (\n          <p>\n            Loading...\n          </p>\n        ) : (\n          <>\n            <h3 className=\"CurrentUser__name\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n\n            <button\n              type=\"button\"\n              className={classNames(\n                'button',\n                'CurrentUser__clear',\n              )}\n              onClick={clearUser}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: propTypes.number.isRequired,\n  clearUser: propTypes.func.isRequired,\n};\n","import React from 'react';\n// import classNames from 'classnames';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  // componentDidMount() {  //можно так\n  //   getTodos()\n  //     .then((result) => {\n  //       this.setState({\n  //         todos: result,\n  //       });\n  //     });\n  // }\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId) => {\n    if (userId === this.state.selectedUserId) {\n      return;\n    }\n\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearForm = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelect={this.selectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearForm}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}